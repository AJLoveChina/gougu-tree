(()=>{"use strict";var t={169:(t,n,e)=>{e.d(n,{Z:()=>c});var r=e(537),o=e.n(r),i=e(645),a=e.n(i)()(o());a.push([t.id,"*{margin:0;color:#333}#options{position:fixed;top:0;left:0;padding:10px;background:rgba(0,0,0,.1)}","",{version:3,sources:["webpack://./src/main.scss"],names:[],mappings:"AAAA,EACE,QAAA,CACA,UAAA,CAGF,SACE,cAAA,CACA,KAAA,CACA,MAAA,CACA,YAAA,CACA,yBAAA",sourcesContent:["* {\r\n  margin: 0;\r\n  color: #333;\r\n}\r\n\r\n#options {\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  padding: 10px;\r\n  background: rgba(0, 0, 0, 0.1);\r\n}"],sourceRoot:""}]);const c=a},645:t=>{t.exports=function(t){var n=[];return n.toString=function(){return this.map((function(n){var e="",r=void 0!==n[5];return n[4]&&(e+="@supports (".concat(n[4],") {")),n[2]&&(e+="@media ".concat(n[2]," {")),r&&(e+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),e+=t(n),r&&(e+="}"),n[2]&&(e+="}"),n[4]&&(e+="}"),e})).join("")},n.i=function(t,e,r,o,i){"string"==typeof t&&(t=[[null,t,void 0]]);var a={};if(r)for(var c=0;c<this.length;c++){var s=this[c][0];null!=s&&(a[s]=!0)}for(var u=0;u<t.length;u++){var l=[].concat(t[u]);r&&a[l[0]]||(void 0!==i&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=i),e&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=e):l[2]=e),o&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=o):l[4]="".concat(o)),n.push(l))}},n}},537:t=>{t.exports=function(t){var n=t[1],e=t[3];if(!e)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(e)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(o," */"),a=e.sources.map((function(t){return"/*# sourceURL=".concat(e.sourceRoot||"").concat(t," */")}));return[n].concat(a).concat([i]).join("\n")}return[n].join("\n")}},379:t=>{var n=[];function e(t){for(var e=-1,r=0;r<n.length;r++)if(n[r].identifier===t){e=r;break}return e}function r(t,r){for(var i={},a=[],c=0;c<t.length;c++){var s=t[c],u=r.base?s[0]+r.base:s[0],l=i[u]||0,p="".concat(u," ").concat(l);i[u]=l+1;var f=e(p),d={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==f)n[f].references++,n[f].updater(d);else{var h=o(d,r);r.byIndex=c,n.splice(c,0,{identifier:p,updater:h,references:1})}a.push(p)}return a}function o(t,n){var e=n.domAPI(n);return e.update(t),function(n){if(n){if(n.css===t.css&&n.media===t.media&&n.sourceMap===t.sourceMap&&n.supports===t.supports&&n.layer===t.layer)return;e.update(t=n)}else e.remove()}}t.exports=function(t,o){var i=r(t=t||[],o=o||{});return function(t){t=t||[];for(var a=0;a<i.length;a++){var c=e(i[a]);n[c].references--}for(var s=r(t,o),u=0;u<i.length;u++){var l=e(i[u]);0===n[l].references&&(n[l].updater(),n.splice(l,1))}i=s}}},569:t=>{var n={};t.exports=function(t,e){var r=function(t){if(void 0===n[t]){var e=document.querySelector(t);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(t){e=null}n[t]=e}return n[t]}(t);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(e)}},216:t=>{t.exports=function(t){var n=document.createElement("style");return t.setAttributes(n,t.attributes),t.insert(n,t.options),n}},565:(t,n,e)=>{t.exports=function(t){var n=e.nc;n&&t.setAttribute("nonce",n)}},795:t=>{t.exports=function(t){var n=t.insertStyleElement(t);return{update:function(e){!function(t,n,e){var r="";e.supports&&(r+="@supports (".concat(e.supports,") {")),e.media&&(r+="@media ".concat(e.media," {"));var o=void 0!==e.layer;o&&(r+="@layer".concat(e.layer.length>0?" ".concat(e.layer):""," {")),r+=e.css,o&&(r+="}"),e.media&&(r+="}"),e.supports&&(r+="}");var i=e.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),n.styleTagTransform(r,t,n.options)}(n,t,e)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(n)}}}},589:t=>{t.exports=function(t,n){if(n.styleSheet)n.styleSheet.cssText=t;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(t))}}}},n={};function e(r){var o=n[r];if(void 0!==o)return o.exports;var i=n[r]={id:r,exports:{}};return t[r](i,i.exports,e),i.exports}e.n=t=>{var n=t&&t.__esModule?()=>t.default:()=>t;return e.d(n,{a:n}),n},e.d=(t,n)=>{for(var r in n)e.o(n,r)&&!e.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:n[r]})},e.o=(t,n)=>Object.prototype.hasOwnProperty.call(t,n),e.nc=void 0,(()=>{var t=e(379),n=e.n(t),r=e(795),o=e.n(r),i=e(569),a=e.n(i),c=e(565),s=e.n(c),u=e(216),l=e.n(u),p=e(589),f=e.n(p),d=e(169),h={};function y(t,n){return{x:t.x+n.x,y:t.y+n.y}}function v(t,n,e){var r=Math.sqrt(n.x*n.x+n.y*n.y),o=n.x/r,i=n.y/r;return{x:t.x+o*e,y:t.y+i*e}}function m(t,n){return Math.sqrt(Math.pow(t.x-n.x,2)+Math.pow(t.y-n.y,2))}h.styleTagTransform=f(),h.setAttributes=s(),h.insert=a().bind(null,"head"),h.domAPI=o(),h.insertStyleElement=l(),n()(d.Z,h),d.Z&&d.Z.locals&&d.Z.locals;var b=function(){function t(t,n){this.start=t,this.end=n}return t.prototype.direction=function(){return{x:this.end.x-this.start.x,y:this.end.y-this.start.y}},t.prototype.distance=function(){return m(this.start,this.end)},t.prototype.getSquare=function(t){var n,e=g(this.direction(),Math.PI/2,t),r=this.distance(),o=v(this.start,e,r),i=v(this.end,e,r);return{tl:(n=t?[this.start,this.end,i,o]:[o,i,this.end,this.start])[0],tr:n[1],br:n[2],bl:n[3]}},t}();function g(t,n,e){var r=n%(2*Math.PI);e||(r=2*Math.PI-r);var o=Math.cos(r),i=Math.sin(r),a=t.x,c=t.y;return{x:a*o-c*i,y:a*i+c*o}}function x(t,n){var e=Math.min(t,n),r=Math.max(t,n);return e===r?e:e+Math.random()*(r-e)}function A(){return"rgba(".concat(Math.floor(x(0,255)),", ").concat(Math.floor(x(0,255)),", ").concat(Math.floor(x(0,255)),", ").concat(x(.5,1),")")}var w,C=(w=function(t,n){return w=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e])},w(t,n)},function(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function e(){this.constructor=t}w(t,n),t.prototype=null===n?Object.create(n):(e.prototype=n.prototype,new e)}),M=function(t){function n(n){var e=t.call(this)||this;return e.points=n.points,e}return C(n,t),n.prototype.render=function(t){return t.save(),t.beginPath(),this.points.forEach((function(n,e){0===e?t.moveTo(n.x,n.y):t.lineTo(n.x,n.y)})),t.strokeStyle=this.strokeStyle,t.closePath(),t.stroke(),this.fillStyle&&(t.fillStyle=this.fillStyle,t.fill()),t.restore(),!0},n}((function(){})),S=function(t){function n(n){var e=this,r=n.tl,o=n.tr,i=n.br,a=n.bl;return function(t,n){var e={};for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&n.indexOf(r)<0&&(e[r]=t[r]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(t);o<r.length;o++)n.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(t,r[o])&&(e[r[o]]=t[r[o]])}}(n,["tl","tr","br","bl"]),(e=t.call(this,{points:[r,o,i,a]})||this).tl=r,e.tr=o,e.br=i,e.bl=a,e}return C(n,t),n.prototype.width=function(){return m(this.tl,this.tr)},n.prototype.height=function(){return m(this.tl,this.bl)},n.prototype.set=function(t){this.fillStyle=t.fillStyle,this.strokeStyle=t.strokeStyle},n}(M);function E(){var t,n="canvas",e=document.getElementById(n);e&&(e.hidden=!0,document.body.removeChild(e)),(t=document.createElement("canvas")).id=n,t.width=window.innerWidth,t.height=window.innerHeight,document.body.appendChild(t),t.getContext("2d").clearRect(0,0,t.width,t.height),function(t,n){var e={x:t.width/2,y:t.height/2},r=t.getContext("2d"),o=function(t){for(var n=[t],e=[t],r=function(){var t=[];n.forEach((function(n){if(n.width()>=8&&n.height()>=8){var e=function(t){var n=t.tl,e=t.tr,r=new b(n,e),o=r.distance(),i=v(n,g(r.direction(),Math.PI/6,!1),o/2*Math.sqrt(3));return[new b(n,i),new b(i,e)].map((function(t){return t.getSquare(!1)})).map((function(t){return new S(t)}))}(n);t.push.apply(t,e)}})),e.push.apply(e,t),n=t};n.length>0;)r();return e}(new S(function(t,n,e){var r=[y(t,{x:-50,y:-50}),y(t,{x:50,y:-50}),y(t,{x:50,y:50}),y(t,{x:-50,y:50})],o=r[0],i=r[1],a=r[2],c=r[3];return{points:[o,i,a,c],tl:o,tr:i,br:a,bl:c}}(e))),i="#333",a=setInterval((function(){if(!r.canvas.hidden){var t=o.shift();t?(t.set({strokeStyle:n.bRandomColor?A():i}),n.bFill&&t.set({fillStyle:n.bRandomColor?A():i}),function(t,n){t.forEach((function(t){return t.render(n)}))}([t],r)):clearInterval(a)}}),1e3/24)}(t,{bFill:document.getElementById("fill-checkbox").checked,bRandomColor:document.getElementById("random-color-checkbox").checked})}E(),document.getElementById("render").addEventListener("click",(function(){E()}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,